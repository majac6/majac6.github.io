"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var visit = require(`unist-util-visit`);
var isRelativeUrl = require(`is-relative-url`);
var fsExtra = require(`fs-extra`);
var path = require(`path`);
var _ = require(`lodash`);
var cheerio = require(`cheerio`);
var sizeOf = require(`image-size`);

module.exports = function (_ref, pluginOptions) {
  var files = _ref.files,
      markdownNode = _ref.markdownNode,
      markdownAST = _ref.markdownAST,
      getNode = _ref.getNode;

  var defaults = {
    ignoreFileExtensions: [`png`, `jpg`, `jpeg`, `bmp`, `tiff`]
  };

  var options = _.defaults(pluginOptions, defaults);

  var filesToCopy = new Map();
  // Copy linked files to the public directory and modify the AST to point to
  // new location of the files.
  var visitor = function visitor(link) {
    if (isRelativeUrl(link.url) && getNode(markdownNode.parent).internal.type === `File`) {
      var linkPath = path.join(getNode(markdownNode.parent).dir, link.url);
      var linkNode = _.find(files, function (file) {
        if (file && file.absolutePath) {
          return file.absolutePath === linkPath;
        }
        return null;
      });
      if (linkNode && linkNode.absolutePath) {
        var newPath = path.join(process.cwd(), `public`, `${linkNode.internal.contentDigest}.${linkNode.extension}`);

        // Prevent uneeded copying
        if (linkPath === newPath) {
          return;
        }

        var relativePath = path.join(`/${linkNode.internal.contentDigest}.${linkNode.extension}`);
        link.url = `${relativePath}`;

        filesToCopy.set(linkPath, newPath);
      }
    }
  };

  // Takes a node and generates the needed images and then returns
  // the needed HTML replacement for the image
  var generateImagesAndUpdateNode = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(image) {
      var imagePath, imageNode, initialImageSrc, link, dimensions, srcSplit, fileName, fileNameNoExt, defaultAlt;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              imagePath = path.posix.join(getNode(markdownNode.parent).dir, image.attr(`src`));
              imageNode = _.find(files, function (file) {
                if (file && file.absolutePath) {
                  return file.absolutePath === imagePath;
                }
                return null;
              });

              if (!(!imageNode || !imageNode.absolutePath)) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              initialImageSrc = image.attr(`src`);
              // The link object will be modified to the new location so we'll
              // use that data to update our ref

              link = { url: image.attr(`src`) };
              _context.next = 8;
              return visitor(link);

            case 8:
              image.attr(`src`, link.url);

              dimensions = void 0;


              if (!image.attr(`width`) || !image.attr(`height`)) {
                dimensions = sizeOf(imageNode.absolutePath);
              }

              // Generate default alt tag
              srcSplit = initialImageSrc.split(`/`);
              fileName = srcSplit[srcSplit.length - 1];
              fileNameNoExt = fileName.replace(/\.[^/.]+$/, ``);
              defaultAlt = fileNameNoExt.replace(/[^A-Z0-9]/gi, ` `);


              image.attr(`alt`, image.attr(`alt`) ? image.attr(`alt`) : defaultAlt);
              image.attr(`width`, image.attr(`width`) ? image.attr(`width`) : dimensions.width);
              image.attr(`height`, image.attr(`height`) ? image.attr(`height`) : dimensions.height);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function generateImagesAndUpdateNode(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  visit(markdownAST, `link`, function (link) {
    var ext = link.url.split(`.`).pop();
    if (options.ignoreFileExtensions.includes(ext)) {
      return;
    }

    visitor(link);
  });

  // This will only work for markdown img tags
  visit(markdownAST, `image`, function (image) {
    var ext = image.url.split(`.`).pop();
    if (options.ignoreFileExtensions.includes(ext)) {
      return;
    }

    var imagePath = path.join(getNode(markdownNode.parent).dir, image.url);
    var imageNode = _.find(files, function (file) {
      if (file && file.absolutePath) {
        return file.absolutePath === imagePath;
      }
      return false;
    });

    if (imageNode) {
      visitor(image);
    }
  });

  // For each HTML Node
  visit(markdownAST, `html`, function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(node) {
      var $, imageRefs, _iterator, _isArray, _i, _ref4, thisImg, ext, videoRefs, _iterator2, _isArray2, _i2, _ref5, thisVideo, _ext, link, aRefs, _iterator3, _isArray3, _i3, _ref6, thisATag, _ext2, _link;

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              $ = cheerio.load(node.value);
              // Handle Images

              imageRefs = [];

              $(`img`).each(function () {
                try {
                  if (isRelativeUrl($(this).attr(`src`))) {
                    imageRefs.push($(this));
                  }
                } catch (err) {
                  // Ignore
                }
              });

              _iterator = imageRefs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

            case 4:
              if (!_isArray) {
                _context2.next = 10;
                break;
              }

              if (!(_i >= _iterator.length)) {
                _context2.next = 7;
                break;
              }

              return _context2.abrupt("break", 27);

            case 7:
              _ref4 = _iterator[_i++];
              _context2.next = 14;
              break;

            case 10:
              _i = _iterator.next();

              if (!_i.done) {
                _context2.next = 13;
                break;
              }

              return _context2.abrupt("break", 27);

            case 13:
              _ref4 = _i.value;

            case 14:
              thisImg = _ref4;
              _context2.prev = 15;
              ext = thisImg.attr(`src`).split(`.`).pop();

              if (!options.ignoreFileExtensions.includes(ext)) {
                _context2.next = 19;
                break;
              }

              return _context2.abrupt("return");

            case 19:
              _context2.next = 21;
              return generateImagesAndUpdateNode(thisImg);

            case 21:
              _context2.next = 25;
              break;

            case 23:
              _context2.prev = 23;
              _context2.t0 = _context2["catch"](15);

            case 25:
              _context2.next = 4;
              break;

            case 27:
              videoRefs = [];
              // Handle video tags.

              $(`video source`).each(function () {
                try {
                  if (isRelativeUrl($(this).attr(`src`))) {
                    videoRefs.push($(this));
                  }
                } catch (err) {
                  // Ignore
                }
              });

              _iterator2 = videoRefs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();

            case 30:
              if (!_isArray2) {
                _context2.next = 36;
                break;
              }

              if (!(_i2 >= _iterator2.length)) {
                _context2.next = 33;
                break;
              }

              return _context2.abrupt("break", 55);

            case 33:
              _ref5 = _iterator2[_i2++];
              _context2.next = 40;
              break;

            case 36:
              _i2 = _iterator2.next();

              if (!_i2.done) {
                _context2.next = 39;
                break;
              }

              return _context2.abrupt("break", 55);

            case 39:
              _ref5 = _i2.value;

            case 40:
              thisVideo = _ref5;
              _context2.prev = 41;
              _ext = thisVideo.attr(`src`).split(`.`).pop();

              if (!options.ignoreFileExtensions.includes(_ext)) {
                _context2.next = 45;
                break;
              }

              return _context2.abrupt("return");

            case 45:

              // The link object will be modified to the new location so we'll
              // use that data to update our ref
              link = { url: thisVideo.attr(`src`) };
              _context2.next = 48;
              return visitor(link);

            case 48:
              thisVideo.attr(`src`, link.url);
              _context2.next = 53;
              break;

            case 51:
              _context2.prev = 51;
              _context2.t1 = _context2["catch"](41);

            case 53:
              _context2.next = 30;
              break;

            case 55:

              // Handle a tags.
              aRefs = [];

              $(`a`).each(function () {
                try {
                  if (isRelativeUrl($(this).attr(`href`))) {
                    aRefs.push($(this));
                  }
                } catch (err) {
                  // Ignore
                }
              });

              _iterator3 = aRefs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();

            case 58:
              if (!_isArray3) {
                _context2.next = 64;
                break;
              }

              if (!(_i3 >= _iterator3.length)) {
                _context2.next = 61;
                break;
              }

              return _context2.abrupt("break", 83);

            case 61:
              _ref6 = _iterator3[_i3++];
              _context2.next = 68;
              break;

            case 64:
              _i3 = _iterator3.next();

              if (!_i3.done) {
                _context2.next = 67;
                break;
              }

              return _context2.abrupt("break", 83);

            case 67:
              _ref6 = _i3.value;

            case 68:
              thisATag = _ref6;
              _context2.prev = 69;
              _ext2 = thisATag.attr(`href`).split(`.`).pop();

              if (!options.ignoreFileExtensions.includes(_ext2)) {
                _context2.next = 73;
                break;
              }

              return _context2.abrupt("return");

            case 73:

              // The link object will be modified to the new location so we'll
              // use that data to update our ref
              _link = { url: thisATag.attr(`href`) };
              _context2.next = 76;
              return visitor(_link);

            case 76:
              thisATag.attr(`href`, _link.url);
              _context2.next = 81;
              break;

            case 79:
              _context2.prev = 79;
              _context2.t2 = _context2["catch"](69);

            case 81:
              _context2.next = 58;
              break;

            case 83:

              // Replace the image node with an inline HTML node.
              node.type = `html`;
              node.value = $.html();
              return _context2.abrupt("return");

            case 86:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, undefined, [[15, 23], [41, 51], [69, 79]]);
    }));

    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }());

  return Promise.all(Array.from(filesToCopy, function () {
    var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref7) {
      var linkPath = _ref7[0],
          newPath = _ref7[1];
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (fsExtra.existsSync(newPath)) {
                _context3.next = 9;
                break;
              }

              _context3.prev = 1;
              _context3.next = 4;
              return fsExtra.copy(linkPath, newPath);

            case 4:
              _context3.next = 9;
              break;

            case 6:
              _context3.prev = 6;
              _context3.t0 = _context3["catch"](1);

              console.error(`error copying file`, _context3.t0);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, undefined, [[1, 6]]);
    }));

    return function (_x3) {
      return _ref8.apply(this, arguments);
    };
  }()));
};