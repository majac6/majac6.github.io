"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require(`bluebird`);

var _require = require(`graphql`),
    GraphQLObjectType = _require.GraphQLObjectType,
    GraphQLInputObjectType = _require.GraphQLInputObjectType,
    GraphQLBoolean = _require.GraphQLBoolean,
    GraphQLString = _require.GraphQLString,
    GraphQLInt = _require.GraphQLInt,
    GraphQLFloat = _require.GraphQLFloat,
    GraphQLEnumType = _require.GraphQLEnumType;

var _require2 = require(`gatsby-plugin-sharp`),
    queueImageResizing = _require2.queueImageResizing,
    base64 = _require2.base64,
    sizes = _require2.sizes,
    resolutions = _require2.resolutions;

var sharp = require(`sharp`);
var fsExtra = require(`fs-extra`);
var sizeOf = require(`image-size`);
var path = require(`path`);

var ImageFormatType = new GraphQLEnumType({
  name: `ImageFormat`,
  values: {
    NO_CHANGE: { value: `` },
    JPG: { value: `jpg` },
    PNG: { value: `png` },
    WEBP: { value: `webp` }
  }
});

var ImageCropFocusType = new GraphQLEnumType({
  name: `ImageCropFocus`,
  values: {
    CENTER: { value: sharp.gravity.center },
    NORTH: { value: sharp.gravity.north },
    NORTHEAST: { value: sharp.gravity.northeast },
    EAST: { value: sharp.gravity.east },
    SOUTHEAST: { value: sharp.gravity.southeast },
    SOUTH: { value: sharp.gravity.south },
    SOUTHWEST: { value: sharp.gravity.southwest },
    WEST: { value: sharp.gravity.west },
    NORTHWEST: { value: sharp.gravity.northwest },
    ENTROPY: { value: sharp.strategy.entropy },
    ATTENTION: { value: sharp.strategy.attention }
  }
});

var DuotoneGradientType = new GraphQLInputObjectType({
  name: `DuotoneGradient`,
  fields: function fields() {
    return {
      highlight: { type: GraphQLString },
      shadow: { type: GraphQLString }
    };
  }
});

module.exports = function (_ref) {
  var type = _ref.type,
      pathPrefix = _ref.pathPrefix,
      getNodeAndSavePathDependency = _ref.getNodeAndSavePathDependency;

  if (type.name !== `ImageSharp`) {
    return {};
  }

  return {
    original: {
      type: new GraphQLObjectType({
        name: `ImageSharpOriginal`,
        fields: {
          width: { type: GraphQLFloat },
          height: { type: GraphQLFloat },
          src: { type: GraphQLString }
        }
      }),
      args: {},
      resolve(image, fieldArgs, context) {
        var _this = this;

        return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
          var details, dimensions, imageName, publicPath;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  details = getNodeAndSavePathDependency(image.parent, context.path);
                  dimensions = sizeOf(details.absolutePath);
                  imageName = `${image.internal.contentDigest}${details.ext}`;
                  publicPath = path.join(process.cwd(), `public`, `static/${imageName}`);


                  if (!fsExtra.existsSync(publicPath)) {
                    fsExtra.copy(details.absolutePath, publicPath, function (err) {
                      if (err) {
                        console.error(`error copying file`, err);
                      }
                    });
                  }

                  return _context.abrupt("return", {
                    width: dimensions.width,
                    height: dimensions.height,
                    src: `/static/` + imageName
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, _this);
        }))();
      }
    },
    resolutions: {
      type: new GraphQLObjectType({
        name: `ImageSharpResolutions`,
        fields: {
          base64: { type: GraphQLString },
          aspectRatio: { type: GraphQLFloat },
          width: { type: GraphQLFloat },
          height: { type: GraphQLFloat },
          src: { type: GraphQLString },
          srcSet: { type: GraphQLString },
          originalName: { type: GraphQLString }
        }
      }),
      args: {
        width: {
          type: GraphQLInt,
          defaultValue: 400
        },
        height: {
          type: GraphQLInt
        },
        jpegProgressive: {
          type: GraphQLBoolean,
          defaultValue: true
        },
        grayscale: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        duotone: {
          type: DuotoneGradientType,
          defaultValue: false
        },
        quality: {
          type: GraphQLInt,
          defaultValue: 50
        },
        toFormat: {
          type: ImageFormatType,
          defaultValue: ``
        },
        cropFocus: {
          type: ImageCropFocusType,
          defaultValue: sharp.strategy.attention
        },
        rotate: {
          type: GraphQLInt,
          defaultValue: 0
        }
      },
      resolve(image, fieldArgs, context) {
        var promise = resolutions({
          file: getNodeAndSavePathDependency(image.parent, context.path),
          args: (0, _extends3.default)({}, fieldArgs, { pathPrefix })
        });
        return promise;
      }
    },
    sizes: {
      type: new GraphQLObjectType({
        name: `ImageSharpSizes`,
        fields: {
          base64: { type: GraphQLString },
          aspectRatio: { type: GraphQLFloat },
          src: { type: GraphQLString },
          srcSet: { type: GraphQLString },
          sizes: { type: GraphQLString },
          originalImg: { type: GraphQLString },
          originalName: { type: GraphQLString }
        }
      }),
      args: {
        maxWidth: {
          type: GraphQLInt,
          defaultValue: 800
        },
        maxHeight: {
          type: GraphQLInt
        },
        grayscale: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        jpegProgressive: {
          type: GraphQLBoolean,
          defaultValue: true
        },
        duotone: {
          type: DuotoneGradientType,
          defaultValue: false
        },
        quality: {
          type: GraphQLInt,
          defaultValue: 50
        },
        toFormat: {
          type: ImageFormatType,
          defaultValue: ``
        },
        cropFocus: {
          type: ImageCropFocusType,
          defaultValue: sharp.strategy.attention
        },
        rotate: {
          type: GraphQLInt,
          defaultValue: 0
        }
      },
      resolve(image, fieldArgs, context) {
        return sizes({
          file: getNodeAndSavePathDependency(image.parent, context.path),
          args: (0, _extends3.default)({}, fieldArgs, { pathPrefix })
        });
      }
    },
    responsiveResolution: {
      deprecationReason: `We dropped the "responsive" part of the name to make it shorter https://github.com/gatsbyjs/gatsby/pull/2320/`,
      type: new GraphQLObjectType({
        name: `ImageSharpResponsiveResolution`,
        fields: {
          base64: { type: GraphQLString },
          aspectRatio: { type: GraphQLFloat },
          width: { type: GraphQLFloat },
          height: { type: GraphQLFloat },
          src: { type: GraphQLString },
          srcSet: { type: GraphQLString },
          originalName: { type: GraphQLString }
        }
      }),
      args: {
        width: {
          type: GraphQLInt,
          defaultValue: 400
        },
        height: {
          type: GraphQLInt
        },
        jpegProgressive: {
          type: GraphQLBoolean,
          defaultValue: true
        },
        grayscale: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        duotone: {
          type: DuotoneGradientType,
          defaultValue: false
        },
        quality: {
          type: GraphQLInt,
          defaultValue: 50
        },
        toFormat: {
          type: ImageFormatType,
          defaultValue: ``
        },
        cropFocus: {
          type: ImageCropFocusType,
          defaultValue: sharp.strategy.attention
        },
        rotate: {
          type: GraphQLInt,
          defaultValue: 0
        }
      },
      resolve(image, fieldArgs, context) {
        var promise = resolutions({
          file: getNodeAndSavePathDependency(image.parent, context.path),
          args: (0, _extends3.default)({}, fieldArgs, { pathPrefix })
        });
        return promise;
      }
    },
    responsiveSizes: {
      deprecationReason: `We dropped the "responsive" part of the name to make it shorter https://github.com/gatsbyjs/gatsby/pull/2320/`,
      type: new GraphQLObjectType({
        name: `ImageSharpResponsiveSizes`,
        fields: {
          base64: { type: GraphQLString },
          aspectRatio: { type: GraphQLFloat },
          src: { type: GraphQLString },
          srcSet: { type: GraphQLString },
          sizes: { type: GraphQLString },
          originalImg: { type: GraphQLString },
          originalName: { type: GraphQLString }
        }
      }),
      args: {
        maxWidth: {
          type: GraphQLInt,
          defaultValue: 800
        },
        maxHeight: {
          type: GraphQLInt
        },
        grayscale: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        jpegProgressive: {
          type: GraphQLBoolean,
          defaultValue: true
        },
        duotone: {
          type: DuotoneGradientType,
          defaultValue: false
        },
        quality: {
          type: GraphQLInt,
          defaultValue: 50
        },
        toFormat: {
          type: ImageFormatType,
          defaultValue: ``
        },
        cropFocus: {
          type: ImageCropFocusType,
          defaultValue: sharp.strategy.attention
        },
        rotate: {
          type: GraphQLInt,
          defaultValue: 0
        }
      },
      resolve(image, fieldArgs, context) {
        return sizes({
          file: getNodeAndSavePathDependency(image.parent, context.path),
          args: (0, _extends3.default)({}, fieldArgs, { pathPrefix })
        });
      }
    },
    resize: {
      type: new GraphQLObjectType({
        name: `ImageSharpResize`,
        fields: {
          src: { type: GraphQLString },
          width: { type: GraphQLInt },
          height: { type: GraphQLInt },
          aspectRatio: { type: GraphQLFloat },
          originalName: { type: GraphQLString }
        }
      }),
      args: {
        width: {
          type: GraphQLInt,
          defaultValue: 400
        },
        height: {
          type: GraphQLInt
        },
        quality: {
          type: GraphQLInt,
          defaultValue: 50
        },
        jpegProgressive: {
          type: GraphQLBoolean,
          defaultValue: true
        },
        pngCompressionLevel: {
          type: GraphQLInt,
          defaultValue: 9
        },
        grayscale: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        duotone: {
          type: DuotoneGradientType,
          defaultValue: false
        },
        base64: {
          type: GraphQLBoolean,
          defaultValue: false
        },
        toFormat: {
          type: ImageFormatType,
          defaultValue: ``
        },
        cropFocus: {
          type: ImageCropFocusType,
          defaultValue: sharp.strategy.attention
        },
        rotate: {
          type: GraphQLInt,
          defaultValue: 0
        }
      },
      resolve(image, fieldArgs, context) {
        return new Promise(function (resolve) {
          var file = getNodeAndSavePathDependency(image.parent, context.path);
          if (fieldArgs.base64) {
            resolve(base64({
              file
            }));
          } else {
            resolve(queueImageResizing({
              file,
              args: (0, _extends3.default)({}, fieldArgs, { pathPrefix })
            }));
          }
        });
      }
    }
  };
};